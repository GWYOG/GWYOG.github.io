<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GWYOG&#39;s Blog</title>
    <description>GWYOG&#39;s Blog to log some private things.
</description>
    <link>https://gwyog.github.io/</link>
    <atom:link href="https://gwyog.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 11 Jun 2016 22:23:58 +0800</pubDate>
    <lastBuildDate>Sat, 11 Jun 2016 22:23:58 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>What you should know about Minecraft mods</title>
        <description>&lt;h2 id=&quot;what-you-should-know-about-minecraft-mods&quot;&gt;What you should know about Minecraft mods&lt;/h2&gt;

&lt;p&gt;作为第一篇博文，我开了一个大坑=_=|||&lt;br /&gt;
在这篇文章中，我将按照个人的一点心得，科普性质地介绍关于Minecraft Mod(1.7.10+)我认为比较重要的一些知识。知道了这些，相信你会对Minecraft Mod有一个更好的认识。&lt;br /&gt;
正如副标题所写的，本文将分为以下几个小节：&lt;br /&gt;
* 基础概念(关于java、Minecraft、Forge等)&lt;br /&gt;
* 许可证(License)概览 &lt;br /&gt;
* Git与Github使用简介&lt;br /&gt;
* 反编译与反混淆&lt;br /&gt;
* 持续集成与mod的构建&lt;br /&gt;
* 汉化mod与提交&lt;br /&gt;
* 如何看懂坠毁报告&lt;br /&gt;
* 如何科学地查看mod的源码&lt;br /&gt;
所讲内容将由浅入深，不过如果你对某一个小节很熟悉的话，跳过也无妨。废话不多说了，现在就正式开始这篇教程吧！&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;一、基础概念&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1.关于java的一些名词解释&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;(1) JVM&lt;/strong&gt;&lt;br /&gt;
JVM，全称是Java Virtual Machine，翻译过来就叫java虚拟机。&lt;br /&gt;
用过虚拟机的人都该知道虚拟机是干什么的，java虚拟机实际上也差不多。它提供了一个虚拟的环境，让java的代码可以在不同的操作系统上运行。&lt;br /&gt;
毕向东老师曾经举过一个形象的例子，他把JVM比作GBA模拟器(VBA)。正是由于这种模拟器的存在，原本卡带中需要在掌机上运行的程序才能在计算机上运行。JVM充当的就是这样的角色，它是java跨平台的根本保证。同样作为面向对象的语言，C++虽然拥有着出色的效率，但在这点上它就不如JAVA了。&lt;br /&gt;
JVM这个名词在Minecraft中并不少见。比如说在许多启动器中都会有一条“JVM启动参数”，这个参数决定了JVM的配置，对客户端/服务端都非常重要。不过大多数启动器会把JVM启动参数做成可视化的界面让用户选择，因此单机的话一般也用不太到它了。(但这个参数不可以乱配置，不然会提示JVM无法创建而启动不了游戏)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) JRE&lt;/strong&gt;&lt;br /&gt;
JRE，全称是Java Runtime Environment，中文名叫Java运行环境。&lt;br /&gt;
我们一般所说的“玩Minecraft前先装Java”中的Java指的就是JRE(除了JRE以外还有JDK，下面会讲)。&lt;br /&gt;
JRE有不同的版本，玩原版Minecraft的话Java6/7/8都可以。但是玩Mod的时候事情就没这么简单了，许多Mod作者可能会使用一些Java8的内容编写代码，或者使用Java8来编译(即把源代码变成Mod的过程)。这些很可能会导致在启动游戏或是加载游戏时Minecraft崩溃。因此如果可以的话，还是尽量用Java8来进行游戏。&lt;br /&gt;
举个简单的例子，1.9.4的Extra Utilities只能使用Java8来玩。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3) JDK&lt;/strong&gt;&lt;br /&gt;
JDK，全称是Java Development Kit,中文名叫Java开发者工具，是专门给使用Java编写代码的人用的。&lt;br /&gt;
作为玩家，在玩Minecraft时安装JRE就行了；但作为Mod作者，则需要使用JDK。不过在安装JDK的时候，同时会一并安装一个相同版本的JRE。因此，装了JDK后也就不用再装JRE了。&lt;br /&gt;
对于JVM，JRE和JDK，它们是种层层包含的关系，即有JVM&amp;lt;JRE&amp;lt;JDK。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(4) 编译与.jar文件&lt;/strong&gt;&lt;br /&gt;
编译是把人能看得懂的代码转变成机器语言的过程。机器读不懂人类的语言，人类也读不懂机器的语言。&lt;br /&gt;
在Java中，编译的概念稍微有些不同。由于JVM(Java虚拟机)的存在，源代码并不是直接被编译成机器语言，而是变成JVM读得懂的字节码(Byte Code)，再由不同平台对应的不同的JVM将字节码解释为机器语言(这个部分离我们就有点远了)。这个过程保证了Java跨平台的特性，但与此同时却降低了Java的执行效率。
Java的源代码都是存在.java文件中，编译后的字节码存在.class文件中。在mod的.jar文件中，只能看到.class文件，没有.java文件，因此我们需要使用反编译的软件进行反编译才能看到源码(实际上，由于Minecraft对于代码的保护，我们还需要反混淆，不过这些等到后面的小节再谈)。&lt;br /&gt;
mod的.jar文件类似一个文件夹，里面包括了mod相关的代码(字节码形式)、材质、音效、语言文本等文件。如果想要查看其里面的内容，只需要右击.jar文件，选择使用解压缩软件(比如WinRAR)打开就行了。如果要修改其里面的文件，拖拽外部的文件进来覆盖或者把里面的文件删除就可以了。不过需要注意的是，许多mod的作者很重视对于它们的mod的保护，这样对.jar进行修改的行为很可能违反了他们的许可证(License)。如果不是十分确定，修改后的.jar文件请不要公开发布(包括汉化文件，也请不要自己直接添加进去)。&lt;/p&gt;

&lt;p&gt;(未完待续，以上内容可能有误，日后有空会再做校正的:P)&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jun 2016 00:00:00 +0800</pubDate>
        <link>https://gwyog.github.io/minecraft%20mod/What_you_should_know_about_Minecraft_mods.html</link>
        <guid isPermaLink="true">https://gwyog.github.io/minecraft%20mod/What_you_should_know_about_Minecraft_mods.html</guid>
        
        <category>Share</category>
        
        <category>Minecraft_Mod</category>
        
        
        <category>Minecraft Mod</category>
        
      </item>
    
  </channel>
</rss>
